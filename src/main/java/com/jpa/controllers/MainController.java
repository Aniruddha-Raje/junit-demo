package com.jpa.controllers;

import java.util.Optional;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.Gson;
import com.jpa.models.User;
import com.jpa.service.DummyServiceImpl;
import com.jpa.service.UserServiceImpl;

/**
 * @author Aniruddha.Raje
 *
 */
// @Controller
@RestController // This means that this class is a Controller(@Controller + @ResponseBody)
@RequestMapping(path = "/api") // This means URL's start with /demo (after Application path)
public class MainController {

	static final Logger log = Logger.getLogger(MainController.class);

	// This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	@Autowired
	private UserServiceImpl service;

	@Autowired
	private DummyServiceImpl dummyService;

	@GetMapping(path = "/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser(@RequestParam String name, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		try {
			return "Saved, User id -> " + service.saveUser(name, email);
		} catch (Exception e) {
			log.debug(e.getMessage());
			return "Could not save!";
		}
	}
	
	@GetMapping(path = "/hello")
	public @ResponseBody String hello() {
		dummyService.callHello();
		return "Ok";
	}

	@GetMapping(path = "/all")
	// @ResponseBody
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return service.listUsers();
	}

	@GetMapping(path = "/findById")
	public @ResponseBody Optional<User> getAllUsers(@RequestParam Integer id) {
		return service.getUserById(id);
	}

	@GetMapping(path = "/findUsersByIds")
	public @ResponseBody Iterable<User> getUsersByIds(@RequestParam String ids) {
		return service.findUsersByIds(ids);
	}

	@GetMapping(path = "/findUsersByNameAndId")
	public @ResponseBody Iterable<User> findUsersByNameAndId(@RequestParam String name, @RequestParam Integer id) {
		return service.findUsersByNameAndId(name, id);
	}

	// Path Variable
	@RequestMapping(value = "/getByPathVariable/{id}/{name}/{role}", method = RequestMethod.GET)
	public @ResponseBody Optional<User> getByPathVariable(@PathVariable Integer id, 
			@PathVariable String name,
			@PathVariable Integer role, 
			@RequestParam Integer age) {
		log.info("Name => " + name);
		log.info("Role => " + role);
		log.info("Age => " + age);
		return service.getUserById(id);
	}

	@PostMapping(path = "/post/{id}")
	public @ResponseBody String updateUser(@RequestBody String request, @PathVariable Integer id,
			@RequestParam String name) {
		log.info("Id => " + id);
		log.info("Name => " + name);

		Gson gson = new Gson();
		User user = gson.fromJson(request, User.class);
		String stringifiedUser = gson.toJson(user);
		log.info("User => " + stringifiedUser);

		log.info("Post Called!");

		return "ok";
	}

	@PutMapping(path = "/put")
	public @ResponseBody String addUser() {

		log.info("Put Called!");

		return "ok";
	}

	@DeleteMapping(path = "/delete")
	public @ResponseBody String deleteUser() {

		log.info("Delete Called!");

		return "ok";
	}
}
