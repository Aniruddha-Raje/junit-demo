package com.jpa.controllers;

import java.util.Optional;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.jpa.models.User;
import com.jpa.service.UserServiceImpl;

/**
 * @author Aniruddha.Raje
 *
 */
@RestController // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {

	static final Logger log = Logger.getLogger(MainController.class);

	// This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	@Autowired
	private UserServiceImpl service;

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return service.listUsers();
	}

	@GetMapping(path = "/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser(@RequestParam String name, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		try {
			return "Saved, User id -> " + service.saveUser(name, email);
		} catch (Exception e) {
			log.debug(e.getMessage());
			return "Could not save!";
		}
	}

	@GetMapping(path = "/findById")
	public @ResponseBody Optional<User> getAllUsers(@RequestParam Integer id) {
		// This returns a JSON or XML with the users
		return service.getUserById(id);
	}

	@GetMapping(path = "/findUsersByIds")
	public @ResponseBody Iterable<User> getUsersByIds(@RequestParam String ids) {
		// This returns a JSON or XML with the users
		return service.findUsersByIds(ids);
	}

	@GetMapping(path = "/findUsersByNameAndId")
	public @ResponseBody Iterable<User> findUsersByNameAndId(@RequestParam String name, @RequestParam Integer id) {
		// This returns a JSON or XML with the users
		return service.findUsersByNameAndId(name, id);
	}
}
